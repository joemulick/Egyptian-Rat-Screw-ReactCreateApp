** 2 users can only play each other if their ranking is within 10 of each other

User 1 (rank: 25) joins (emit 'match_request')
	num_users = 1 => wait for more players
User 2 (rank: 100) joins (emit 'match_request')
	num_users = 2 => comapre players to determine match
		no users are evenly matched => wait for more players
User 3 (rank: 66) joins (emit 'match_request')
	num_users = 3 => comapre players to determine match
		no users are evenly matched => wait for more players
User 4 (rank: 92) joins (emit 'match_request')
	num_users = 4 => comapre players to determine match
		User 2 and User 4 are evenly matched => emit 'match_found' (2, 4)
User 5 (rank: 27) joins (emit 'match_request')
	num_users = 3 => comapre players to determine match
		User 1 and User 5 are evenly matched => emit 'match_found' (1, 5)
User 6 (rank: 63) joins (emit 'match_request')
	num_users = 1 => comapre players to determine match
		User 3 and User 6 are evenly matched => emit 'match_found' (3, 6)

.on 'match_found'
	create Game 1 and serve to User 2 and User 4
	create Game 2 and serve to User 1 and User 5
	create Game 3 and serve to User 3 and User 6

We could use something like a hash map. Collisions would indicate that a good match was detected.
* This would have some runtime advantages
	- insertion				O(1)
	- game detection	O(1)
* This would act like a FIFO structure, meaning temporal data is maintained
* Potential disadvantage: rank 39 would never play rank 40, etc.

					_____ _____ _____ _____ _____ _____ _____ _____ _____ _____
					 0-10 10-20 20-30 30-40 40-50 50-60 60-70 70-80 80-90 90-100

User 1 enters (25 -> 21-30)
					_____ _____ __1__ _____ _____ _____ _____ _____ _____ _____
					 0-10 10-20 20-30 30-40 40-50 50-60 60-70 70-80 80-90 90-100

User 2 enters (100 -> 91-100)
					_____ _____ __1__ _____ _____ _____ _____ _____ _____ __2__
					 1-10 11-20 21-30 31-41 41-51 51-60 61-70 71-80 81-90 91-100

User 3 enters (66 -> 61-70)
					_____ _____ __1__ _____ _____ _____ __3__ _____ _____ __2__
					 1-10 11-20 21-30 31-41 41-51 51-60 61-70 71-80 81-90 91-100

User 4 enters (92 -> 91-100) COLLISION => 'match_found'
					_____ _____ __1__ _____ _____ _____ __3__ _____ _____ _____	 -> (2, 4)
					 1-10 11-20 21-30 31-41 41-51 51-60 61-70 71-80 81-90 91-100

User 5 enters (27 -> 21-30) COLLISION => 'match_found'
					_____ _____ _____ _____ _____ _____ __3__ _____ _____ _____	 -> (1, 5)
					 1-10 11-20 21-30 31-41 41-51 51-60 61-70 71-80 81-90 91-100

User 6 enters (63 -> 61-70) COLLISION => 'match_found'
					_____ _____ _____ _____ _____ _____ _____ _____ _____ _____	 -> (3, 6)
					 1-10 11-20 21-30 31-41 41-51 51-60 61-70 71-80 81-90 91-100
